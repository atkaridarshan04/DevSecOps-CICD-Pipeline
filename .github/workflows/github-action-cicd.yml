name: GitHub Actions CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Code Checkout
  checkout:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

  # Install Dependencies (Maven, jq only)
  setup:
    needs: checkout
    runs-on: self-hosted
    steps:
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt install -y maven
          mvn -version

      - name: Install jq
        run: |
          sudo apt install -y jq
          jq --version

  # Build Stage
  build:
    needs: setup
    runs-on: self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn package --file pom.xml

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifacts
          path: target/*.jar

  # Static Code Analysis
  sonar_scan:
    needs: build
    runs-on: self-hosted
    steps:
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Docker Build & Push
  docker_build:
    needs: security_scan
    runs-on: self-hosted
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Image Tag
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="$GIT_SHA"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-cicd:${{ env.IMAGE_TAG }} .

      - name: Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-cicd:${{ env.IMAGE_TAG }}
          format: 'table'
          output: 'trivy-image-report.txt'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-cicd:${{ env.IMAGE_TAG }}

  # Deployment Stage
  deploy:
    needs: docker_build
    runs-on: self-hosted
    steps:
      - name: Setup Kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: kubectl apply -f deployment-service.yaml